 start : _EOL* (module_def | compiler_directive | _comment )*

module_def : "module" _WH _identifier _WH _EOL* _parameters_list? _WH? "(" _EOL* _port_definitions _EOL* ");" _EOL* module_content "endmodule"

module_content: (definitions | simple_cont_assignment | _comment | defparam | module_inst | standalone_parameter_def | genvar)*

compiler_directive : "`"  /(.)+/ _EOL?


module_inst: _identifier _WH? ("#(" _EOL? module_param_con* ")")? _WH?  _identifier _WH? "(" _EOL? module_port_con* ");" _EOL?

module_port_con: module_connection
module_param_con: module_connection

module_connection: ("." _identifier "(" ( (_identifier _bus_dim_inst? | _vlog_number | expression | _WH)+ ")")  (",")? _EOL? | line_comment)

//
// MODULE PORT DEFINITION
//

_port_definitions : ( bus | interface | line_comment)*

bus : port_direction _WH signal_type _WH? "signed"? _WH? bus_dim_spec? _WH? _identifier (","? _EOL?)? _EOL?

interface: simple_identifier "." simple_identifier _WH simple_identifier ("," _EOL)?

port_direction: (/input/ | /output/ | /inout/)

//
// PARAMETERS DEFINITIONS
//

_parameters_list:"#(" _EOL* (parameter_def)* ")" _EOL*

parameter_def: _WH? ("parameter" | "param")? _WH* _identifier _WH* "=" _WH* (_vlog_number | STRING | _identifier | expression) (",")? (_EOL)?
standalone_parameter_def: parameter_def* _WH? ";" _EOL*


//
// SIGNALS DEFINITIONS
//

signal_definition: signal_type  _WH? "signed"? _WH? net_decl_list ";" (_WH? line_comment? | _EOL )
definitions: (signal_definition | integer)

net_decl_list: bus_dim_spec? (_net_decl ","?)*

_net_decl : (packed_net_decl | unpacked_net_decl)

packed_net_decl: _WH* _identifier (_WH? "=" _WH? packed_net_initialization )? _WH?
packed_net_initialization: (_vlog_number | expression | concatenation)
unpacked_net_decl: _WH* _identifier _WH? bus_dim_spec (_WH? "=" _WH? unpacked_net_initialization)? _WH?
unpacked_net_initialization: "{"(_WH? _vlog_number _WH?","? | _WH? _vlog_number _WH?","? )*"}"
signal_type: (/reg/ | /wire/ | /logic/)

integer: integer_type _WH integer_decl+ ";" _EOL
integer_decl: ","? _WH* _identifier (_WH? "=" _WH? (int_number))? _WH?
integer_type : ( /byte/ | /shortint/ | /integer/ | /longint/ | /int/ | /time/)

genvar: /genvar/ _WH (_identifier ","? )+ ";" _EOL


//
// ASSIGNMENTS
//

simple_cont_assignment: "assign " /[^;]/* ";" _EOL*
defparam: "defparam " _identifier "." _identifier _WH* bus_dim_spec? _WH* "=" _WH* (expression | _vlog_number | _identifier) ";" _EOL*

//
// UTILITIES
//

bus_dim_spec : "[" (bus_expression | _vlog_number ) ":" (bus_expression | _vlog_number ) "]"
_bus_dim_inst : (bus_bit | bus_slice)

bus_bit: "["(expression | _vlog_number)"]"
bus_slice: "["(expression | _vlog_number)":"(expression | _vlog_number)"]"

repetition: (_identifier | int_number)"{"_vlog_number"}"
concatenation: "{"(((_identifier| _vlog_number) ","?)+ | repetition )"}" 
//
// NUMBERS
//

_vlog_number.2 : (vlog_number_hex|vlog_auto_hex|vlog_auto_dec|vlog_number_dec|vlog_auto_oct|vlog_number_oct|vlog_auto_bin|vlog_number_bin | int_number)

int_number : DEC_NUMBER

vlog_number_hex: /-/? DEC_NUMBER"'h"HEX_NUMBER
vlog_number_dec: /-/? DEC_NUMBER"'d"DEC_NUMBER
vlog_number_oct: /-/? DEC_NUMBER"'o"OCT_NUMBER
vlog_number_bin: /-/? DEC_NUMBER"'b"BIN_NUMBER

vlog_auto_hex: /-/? "'h"HEX_NUMBER
vlog_auto_dec: /-/? "'d"DEC_NUMBER
vlog_auto_oct: /-/? "'o"OCT_NUMBER
vlog_auto_bin: /-/? "'b"BIN_NUMBER

//
// COMMENTS
//

_comment : (line_comment|BLOCK_COMMENT)

line_comment : "//" /./* _EOL

BLOCK_COMMENT: /\/\*(?:.|\n)+?\*\// _EOL*

//
// EXPRESSIONS
//

expression: (expression_bin | expression_un | sys_task)

expression_bin: ((_identifier _bus_dim_inst? | expression | _vlog_number ) _WH* binary_operators _WH* (_identifier _bus_dim_inst? | expression | _vlog_number))
expression_un:  (unary_operator _identifier _bus_dim_inst? |unary_operator expression)

binary_operators: /(\+|-|\*|\/|%|==|!=|===|!==|==\?|!=\?|&&|\|\||\*\*|<|<=|>|>=|&|\||\^|\^~|~\^|>>|<<|>>>|<<<|->|<->)/
unary_operator: /\+|-|!|~|&|~&|\||~\||\^|~\^|\^~/

sys_task : /\$[a-zA-Z0-9_]*/ "(" (expression | _identifier _bus_dim_inst?) ")"


//
// BASIC COMPONENTS
//

simple_identifier: /[a-zA-Z0-9_$]+/
interface_identifier: simple_identifier "." simple_identifier

_identifier: (simple_identifier | interface_identifier)

bus_expression.0: /(\w| |\*|\/|\-|\+|\$|\(|\))+/

STRING : /\"/ STRING_CONTENT /\"/
STRING_CONTENT :/(?:[a-zA-Z0-9]+| |_|!|\"|#|\$|%|&|'|,|.|\(|\)|\*|\+|`|-|\/|:|;|<|=|>|\?|@|\[|\]|\\|\^|_|{|}|\||~)+/

_EOL : " "* ( NEWLINE | /\f/)

HEX_NUMBER : /[0-9a-f]+/
DEC_NUMBER : /[0-9]+/
OCT_NUMBER : /[0-7]+/
BIN_NUMBER : /[0-1]+/

_WH : " "+

%import common.NEWLINE
%import common.LETTER
%import common.DIGIT
%import common.NUMBER
%import common.ESCAPED_STRING